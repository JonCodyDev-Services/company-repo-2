name: Add Issue to Project

on:
  issues:
    types: [opened]

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    permissions:
      repository-projects: write  # Allows interaction with repository projects
      issues: write                # Allows interaction with issues

    env:
      GITHUB_TOKEN: ${{ secrets.COMPANY_REPO_ACTIONS_TOKEN }}

    steps:
      - name: Add the issue to the project
        uses: actions/github-script@v6
        with:
          script: |
            const repoOwner = "JonCodyDev-Services";  // Your organization name
            const repoName = "company-repo-2";  // Your repository name
            const projectName = "proj2";  // Your project name
            const issueNumber = ${{ github.event.issue.number }};
            
            // GraphQL query to get GitHub Projects Beta (Projects V2)
            const query = `
              query {
                repository(owner: "${repoOwner}", name: "${repoName}") {
                  projectsV2(first: 10) {
                    nodes {
                      id
                      title
                      columns(first: 10) {
                        nodes {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `;

            // Send the GraphQL query to GitHub
            const result = await github.graphql(query);

            // Log the response to check the projects
            console.log('GitHub Projects Beta Response:', result);

            // Check if no projects found
            if (result.repository.projectsV2.nodes.length === 0) {
              console.log(`No GitHub Projects Beta found for repository ${repoOwner}/${repoName}.`);
              return;  // Exit if no projects found
            }

            // Log the found projects
            result.repository.projectsV2.nodes.forEach(project => {
              console.log(`Project Title: ${project.title}, Project ID: ${project.id}`);
              
              // Check columns in the project
              project.columns.nodes.forEach(column => {
                console.log(`Column Name: ${column.name}, Column ID: ${column.id}`);
              });
            });

            // Find the project and column
            let project = result.repository.projectsV2.nodes.find(p => p.title === projectName);

            if (!project) {
              throw new Error(`GitHub Project with name "${projectName}" not found.`);
            }

            // Find the "Todo" column in the project
            const todoColumn = project.columns.nodes.find(column => column.name.toLowerCase() === "todo");

            if (todoColumn) {
              // Add the issue to the "Todo" column
              await github.rest.projects.createCard({
                column_id: todoColumn.id,  // Column ID for "Todo"
                content_id: issueNumber,
                content_type: 'Issue'
              });
              console.log(`Issue #${issueNumber} added to the "Todo" column in project "${projectName}".`);
            } else {
              console.log('Todo column not found');
            }
